from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from crm_state import CRM_state
import asyncio
import json
import os

# link: t.me/nice_crm_bot

storage = MemoryStorage()
loop = asyncio.get_event_loop()
bot = Bot(token='2076970810:AAHMRY45yaAdO4mbbcn2tcge-Q0ZOjmS4pk', parse_mode='html')
dp = Dispatcher(bot, loop=loop, storage=storage)
info = {"CRM": []}


# user_info = {"first_name": "",
#              "phone_number": "",
#              "user_id": ""}


def reader():
    with open("215037238.json", "r") as file:
        inf = json.load(file)
    return inf


def adder(inf):
    with open("215037238.json", "w") as file:
        json.dump(inf, file, indent=3)


def creator_info():
    with open("215037238.json", "w") as file:
        information = {"objects": [],
                       "details": {"Privat": " ",
                                   "Mono": " ",
                                   "Phone_number": " "},
                       "clients": [],
                       "Reports": []
                       }
        info["CRM"].append(information)
        json.dump(info, file, indent=3)


def check_id(__id):
    inf = reader()
    for i in inf["CRM"][0]["clients"]:
        if str(__id) == i["user_id"]:
            return True
    else:
        return False


def add_details(add, more, number=0):
    inf = reader()
    if more.lower() == "mono":
        if add == "add":
            inf['CRM'][0]['details']['Mono'] = number
        elif add == "dell":
            inf['CRM'][0]['details']['Mono'] = " "
    elif more.lower() == "privat":
        if add == "add":
            inf["CRM"][0]["details"]["Privat"] = number
        elif add == "dell":
            inf["CRM"][0]["details"]["Privat"] = " "
    if more.lower() == "phone":
        if add == "add":
            inf["CRM"][0]["details"]["Phone_number"] = number
        elif add == "dell":
            inf["CRM"][0]["details"]["Phone_number"] = " "
    adder(inf)


def add_clients(add, client_info):
    inf = reader()
    if add == "add":
        inf["CRM"][0]["clients"].append(client_info)
    elif add == "dell":
        for i in range(len(inf["CRM"][0]["clients"])):
            if inf["CRM"][0]["clients"][i]["first_name"] == client_info["first_name"]:
                inf["CRM"][0]["clients"].pop(i)
    adder(inf)


def add_objects(add, object_name):
    inf = reader()
    if add == "add":
        inf["CRM"][0]["objects"].append(object_name)
    elif add == "dell":
        for i in range(len(inf["CRM"][0]["objects"])):
            if inf["CRM"][0]["objects"][i] == object_name:
                del inf["CRM"][0]["objects"][i]
    adder(inf)


def get_debt(user_id):
    inf = reader()
    for i in inf["CRM"][0]["clients"]:
        if user_id == i["user_id"]:
            if len(i["debt"]) > 0:
                return str(i["debt"])
            else:
                return 0
    else:
        return 0


def add_debt(user_id, debt_num):
    inf = reader()
    for i in inf["CRM"][0]["clients"]:
        if str(user_id) == i['user_id']:
            i["debt"] = debt_num
            break
    adder(inf)


def add_adres(user_id, adres):
    inf = reader()
    for i in inf["CRM"][0]["clients"]:
        if str(user_id) == i['user_id']:
            i["adres"] = adres
            break
    adder(inf)


keyboard_user = types.ReplyKeyboardMarkup(resize_keyboard=True)
debt_button = types.KeyboardButton(text="–ú–æ—ó –±–æ—Ä–≥–∏")
bank_button = types.KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞")
photo_button = types.KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —á–µ–∫—É")
keyboard_user.add(debt_button).add(bank_button).add(photo_button)

keyboard_contact = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
button_contact = types.KeyboardButton(text="–ú–æ–∂–Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç?", request_contact=True)
keyboard_contact.add(button_contact)

start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
pay_button = types.KeyboardButton(text='–ù–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –æ–ø–ª–∞—Ç—É')
path_pay_button = types.KeyboardButton(text='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ä–≥–∏')
settings_button = types.KeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
start_keyboard.add(pay_button).add(path_pay_button).add(settings_button)

settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
change_button = types.KeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏üí≥')
objects_button = types.KeyboardButton(text="–ú–æ—ó –æ–±'—î–∫—Ç–∏")
delete_button = types.KeyboardButton(text='–ú–æ—ó –æ—Ä–µ–Ω–¥–∞—Ä—ñ')
back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
settings_keyboard.add(objects_button).add(delete_button).add(change_button).add(back_button)

add_objects_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
add_button = types.KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç")
dell_button = types.KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç")
come_back_button = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
add_objects_keyboard.add(add_button).add(dell_button).add(come_back_button)

details_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
b_button = types.KeyboardButton(text="–ú–æ—ó –∫–∞—Ä—Ç–∏")
phone_button = types.KeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω")
back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
details_keyboard.add(b_button).add(phone_button).add(back_button)

bank_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
add_button = types.KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç—É")
dell_button = types.KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç—É")
back_button = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
bank_keyboard.add(add_button).add(dell_button).add(back_button)

orenda_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
orendar = types.KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –æ—Ä–µ–Ω–¥–∞—Ä—è—Ö")
dell_orendar = types.KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–µ–Ω–¥–∞—Ä—è")
back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
orenda_keyboard.add(orendar).add(dell_orendar).add(back_button)


@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    id_ = message.from_user.id
    if id_ == 789402487:  # or 789402487 830944177 215037238
        await message.answer("–í—ñ—Ç–∞—é –≥–æ—Å–ø–æ–¥–∞—Ä", reply_markup=start_keyboard)
    else:
        await message.answer("–í—ñ—Ç–∞—é –Ω–µ–∑–Ω–∞–π–æ–º–µ—Ü—å", reply_markup=keyboard_contact)


@dp.message_handler(content_types=["contact"])
async def contact_command(message: types.Message):
    global vyl, info, user_info, id_
    id_ = message.from_user.id
    # contact = message.contact
    danetka = types.InlineKeyboardMarkup()
    yeas_b = types.InlineKeyboardButton(text="—Ç–∞–∫", callback_data="—Ç–∞–∫")
    no_b = types.InlineKeyboardButton(text="–Ω—ñ", callback_data="–Ω—ñ")
    danetka.add(yeas_b, no_b)
    user_info = {
        'first_name': f"{message.contact.first_name}",
        'phone_number': f"{message.contact.phone_number}",
        'user_id': f"{message.contact.user_id}",
        'debt': "",
        'adres': "",
    }
    # add_clients("add", user_info)
    await message.forward(789402487)  # 789402487 215037238
    await bot.send_message(789402487, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?", reply_markup=danetka)


@dp.callback_query_handler(text="—Ç–∞–∫")
async def yeas_danetka(call: types.CallbackQuery):
    global id_, user_info
    add_clients("add", user_info)
    await bot.send_message(id_, "–í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤", reply_markup=keyboard_user)
    await bot.answer_callback_query(call.id, "–û—Ä–µ–Ω–¥–∞—Ä—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –æ—Ä–µ–Ω–¥–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    await CRM_state.debt.set()


@dp.message_handler(state=CRM_state.debt)
async def cent_debt(message: types.Message):
    global id_
    add_debt(id_, message.text)
    await message.answer("–¶—ñ–Ω—É –æ—Ä–µ–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ –∑–∞ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    await CRM_state.obj.set()


@dp.message_handler(state=CRM_state.obj)
async def add_obj_to_user(message: types.Message, state: FSMContext):
    global id_
    add_adres(id_, message.text)
    await message.answer("–û–±'—î–∫—Ç –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", reply_markup=start_keyboard)
    await state.finish()


@dp.callback_query_handler(text="–Ω—ñ")
async def no_danetka(call: types.CallbackQuery):
    global id_
    await bot.send_message(id_, "–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –æ–¥–∏–Ω –∑ –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤")
    await bot.answer_callback_query(call.id, "–û—Ä–µ–Ω–¥–∞—Ä—è –Ω–µ –¥–æ–¥–∞–Ω–æ!")
    await bot.delete_message(call.message.chat.id, call.message.message_id)

    # with open("nice.json", "w") as f:
    #     info["data"].append(a)
    #     json.dump(info, f, indent=3)


@dp.message_handler(text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ä–≥–∏")
async def check_debts(message: types.Message):
    await message.answer("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ–∫—ñ–≤ –ø–æ—á–∞–ª–∞—Å—å")
    for files in os.listdir("photos"):
        file = types.InputFile(rf"photos\{files}", files)
        await message.answer_document(file)
    await message.answer("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ–∫—ñ–≤ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å")


@dp.message_handler(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def settings(message: types.Message):
    await message.answer("–í–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", reply_markup=settings_keyboard)


@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=start_keyboard)


@dp.message_handler(text="–ú–æ—ó –æ–±'—î–∫—Ç–∏")
async def my_objects(message: types.Message):
    await message.answer("–í–∏ –≤ –º–µ–Ω—é –æ–±'—î–∫—Ç—ñ–≤", reply_markup=add_objects_keyboard)


@dp.message_handler(text=["–î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç", "–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç"])
async def object_command(message: types.Message):
    global adde
    if message.from_user.id == 789402487:
        if message.text == "–î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç":
            adde = True
            await message.answer("–û—á—ñ–∫—É—é –Ω–∞–∑–≤—É –æ–±'—î–∫—Ç—É")
            await CRM_state.object1.set()
        else:
            adde = False
            await message.answer("–û—á—ñ–∫—É—é –Ω–∞–∑–≤—É –æ–±'—î–∫—Ç—É")
            await CRM_state.object1.set()
    else:
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏")


@dp.message_handler(state=CRM_state.object1)
async def add(message: types.Message, state: FSMContext):
    global adde
    objec = message.text
    if adde:
        add_objects("add", objec)
        await message.answer("–ù–æ–≤–∏–π –æ–±'—î–∫—Ç –¥–æ–¥–∞–Ω–æ", reply_markup=start_keyboard)
        await state.finish()
    elif not adde:
        add_objects("dell", objec)
        await message.answer("–û–±'—î–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=start_keyboard)
        await state.finish()


@dp.message_handler(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏üí≥")
async def details(message: types.Message):
    await message.answer("–í–∏ –≤ –º–µ–Ω—é —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤, —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —á–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç—É —á–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                         reply_markup=details_keyboard)


@dp.message_handler(text="–¢–µ–ª–µ—Ñ–æ–Ω")
async def phone_number(message: types.Message):
    phone_keyb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    phone_add = types.KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    phone_dell = types.KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    back_but = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    phone_keyb.add(phone_add).add(phone_dell).add(back_but)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=phone_keyb)
    await CRM_state.phone.set()


@dp.message_handler(state=CRM_state.phone)
async def phoner(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                             "–í—ñ–Ω –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –Ω–∞ +380")
        await CRM_state.phone_adder.set()
    elif text == "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        add_details("dell", "phone")
        await message.answer("–ù–æ–º–µ—Ä –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=settings_keyboard)
        await state.finish()
    else:
        await message.answer("–≤–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–µ–Ω—é –¥–µ—Ç–∞–ª–µ–π", reply_markup=settings_keyboard)
        await state.finish()


@dp.message_handler(state=CRM_state.phone_adder)
async def phone_adder(message: types.Message, state: FSMContext):
    text = message.text
    if text.startswith("+380") and len(text) == 13:
        add_details("add", "phone", number=text)
        await message.answer("—Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ", reply_markup=settings_keyboard)
        await state.finish()


@dp.message_handler(text=["–ú–æ—ó –∫–∞—Ä—Ç–∏"])
async def privat(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=bank_keyboard)
    await CRM_state.bank1_1.set()


@dp.message_handler(state=CRM_state.bank1_1)
async def card_adder1(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç—É":
        inl_keyb_b = types.InlineKeyboardMarkup()
        priv_but = types.InlineKeyboardButton(text="Privat", callback_data="privat1")
        mono_but = types.InlineKeyboardButton(text="Mono", callback_data="mono1")
        inl_keyb_b.add(priv_but, mono_but)
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É —è–∫–æ–≥–æ –±–∞–Ω–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏", reply_markup=inl_keyb_b)
        await state.finish()
    elif text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç—É":
        await state.finish()
        keyb_dell = types.InlineKeyboardMarkup()
        keyb_button_p = types.InlineKeyboardButton(text="Privat", callback_data="Privat")
        keyb_button_m = types.InlineKeyboardButton(text="Mono", callback_data="Mono")
        keyb_dell.add(keyb_button_p).add(keyb_button_m)
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏", reply_markup=keyb_dell)
    elif text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=start_keyboard)
        await state.finish()


@dp.message_handler(state=CRM_state.bank1_2)
async def add_privat(message: types.Message):
    numb = message.text
    if len(numb) == 16:
        add_details("add", "privat", number=numb)
        await message.answer(f"–ö–∞—Ä—Ç—É: {numb}\n"
                             f"–ë–∞–Ω–∫: Privat\n"
                             f"–î–æ–¥–∞–Ω–æ!!!")
        await CRM_state.bank1_1.set()
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ ,\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=bank_keyboard)
        await CRM_state.bank1_1.set()


@dp.message_handler(state=CRM_state.bank1_3)
async def add_mono(message: types.Message):
    numb = message.text
    if len(numb) == 16:
        add_details("add", "mono", number=numb)
        await message.answer(f"–ö–∞—Ä—Ç—É: {numb}\n"
                             f"–ë–∞–Ω–∫: Mono\n"
                             f"–î–æ–¥–∞–Ω–æ!!!")
        await CRM_state.bank1_1.set()
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ ,\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=bank_keyboard)
        await CRM_state.bank1_1.set()


@dp.callback_query_handler(text="privat1")
async def privat_delete(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏")
    await CRM_state.bank1_2.set()


@dp.callback_query_handler(text="mono1")
async def privat_delete(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏")
    await CRM_state.bank1_3.set()


@dp.callback_query_handler(text="Privat")
async def privat_delete(call: types.CallbackQuery):
    add_details("dell", "privat")
    await bot.answer_callback_query(call.id, "–ö–∞—Ä—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
    await CRM_state.bank1_1.set()
    # await call.message.answer("–í–∏ –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", reply_markup=settings_keyboard)


@dp.callback_query_handler(text="Mono")
async def mono_delete(call: types.CallbackQuery):
    add_details("dell", "mono")
    await bot.answer_callback_query(call.id, "–ö–∞—Ä—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
    await CRM_state.bank1_1.set()
    # await call.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", reply_markup=settings_keyboard)


@dp.message_handler(text="–ú–æ—ó –æ—Ä–µ–Ω–¥–∞—Ä—ñ")
async def my_orendars(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=orenda_keyboard)


@dp.message_handler(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –æ—Ä–µ–Ω–¥–∞—Ä—è—Ö")
async def info_users(message: types.Message):
    inf = reader()
    if len(inf["CRM"][0]["clients"]) == 0:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏—â–æ –Ω–µ–º–∞—î –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤", reply_markup=settings_keyboard)
    else:
        for i in inf["CRM"][0]["clients"]:
            name = i["first_name"]
            phone = i["phone_number"]
            await message.answer(f"–Ü–º'—è:{name}\n"
                                 f"–¢–µ–ª–µ—Ñ–æ–Ω:{phone}")


@dp.message_handler(text="–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–µ–Ω–¥–∞—Ä—è")
async def dell_client(message: types.Message):
    inf = reader()
    ret = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    ret_button = types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
    ret.add(ret_button)
    for i in inf["CRM"][0]["clients"]:
        name = i["first_name"]
        phone = i["phone_number"]
        await message.answer(f"–Ü–º'—è: {name}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–º'—è –æ—Ä–µ–Ω–¥–∞—Ä—è —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏", reply_markup=ret)
    await CRM_state.client_dell.set()


@dp.message_handler(state=CRM_state.client_dell)
async def client_deleter(message: types.Message, state: FSMContext):
    if message.text != "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        inf = reader()
        for i in inf["CRM"][0]["clients"]:
            if i["first_name"] == message.text:
                add_clients("dell", i)
                await message.answer("–û—Ä–µ–Ω–¥–∞—Ä—è –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=settings_keyboard)
                await state.finish()
    else:
        await state.finish()
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", reply_markup=settings_keyboard)


@dp.message_handler(text="–ù–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –æ–ø–ª–∞—Ç—É")
async def remember(message: types.Message):
    rememb_k = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    rem_all = types.KeyboardButton(text="–ù–∞–≥–∞–¥–∞—Ç–∏ –≤—Å—ñ–º")
    rem_one = types.KeyboardButton(text="–ù–∞–≥–∞–¥–∞—Ç–∏ –æ–¥–Ω–æ–º—É")
    back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    rememb_k.add(rem_one).add(rem_all).add(back)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=rememb_k)


@dp.message_handler(text="–ù–∞–≥–∞–¥–∞—Ç–∏ –≤—Å—ñ–º")
async def rememb_all(message: types.Message):
    inf = reader()
    if len(inf["CRM"][0]["clients"]) > 0:
        for i in inf["CRM"][0]["clients"]:
            await bot.send_message(i["user_id"], "–ù–∞—Å—Ç–∞–≤ —á–∞—Å –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
        await message.answer("–û—Ä–µ–Ω–¥–∞—Ä—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ", reply_markup=start_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤!")


@dp.message_handler(text="–ù–∞–≥–∞–¥–∞—Ç–∏ –æ–¥–Ω–æ–º—É")
async def rememb_one(message: types.Message):
    inf = reader()
    ret = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    ret_button = types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
    ret.add(ret_button)
    if len(inf["CRM"][0]["clients"]) > 0:
        for i in inf["CRM"][0]["clients"]:
            name = i["first_name"]
            phone = i["phone_number"]
            await message.answer(f"–Ü–º'—è: {name}\n"
                                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ä–µ–Ω–¥–∞—Ä—è —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏", reply_markup=ret)
        await CRM_state.remind.set()
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤!")


@dp.message_handler(state=CRM_state.remind)
async def rem(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text != "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        inf = reader()
        for i in inf["CRM"][0]["clients"]:
            if i["phone_number"] == message.text:
                _id = i["user_id"]
                await bot.send_message(_id, "–ù–∞—Å—Ç–∞–≤ —á–∞—Å –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
        await message.answer("–û—Ä–µ–Ω–¥–∞—Ä—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ", reply_markup=start_keyboard)
    else:
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=start_keyboard)


@dp.message_handler(text="–ú–æ—ó –±–æ—Ä–≥–∏")
async def user_debt(message: types.Message):
    if check_id(message.from_user.id):
        debt = get_debt(str(message.from_user.id))
        await message.answer(f"–û—Å—å –≤–∞—à –±–æ—Ä–≥: {debt}")
    else:
        await message.answer("–í–∏ –Ω–µ —î –æ—Ä–µ–Ω–¥–∞—Ä–µ–º!!!")


@dp.message_handler(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞")
async def user_check_credit(message: types.Message):
    if check_id(message.from_user.id):
        inf = reader()
        privat = inf["CRM"][0]["details"]["Privat"]
        mono = inf["CRM"][0]["details"]["Mono"]
        phone = inf["CRM"][0]["details"]["Phone_number"]
        await message.answer(f"privat: {privat}")
        await message.answer(f"mono: {mono}")
        await message.answer(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–ª–∞—Å–Ω–∏–∫–∞: {phone}")
    else:
        await message.answer("–í–∏ –Ω–µ —î –æ—Ä–µ–Ω–¥–∞—Ä–µ–º!!!")


@dp.message_handler(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —á–µ–∫—É")
async def check_fun(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —á–µ–∫—É –ø—Ä–æ –æ–ø–ª–∞—Ç—É")


@dp.message_handler(content_types=["photo"])
async def photo_sender(message: types.Message):
    await message.photo[-1].download()
    await message.forward(789402487)
    await message.answer("–ß–µ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    add_debt(message.from_user.id, 0)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
